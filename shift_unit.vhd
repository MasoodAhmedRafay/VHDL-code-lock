library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity shift_unit is

	port
	(
		clk			: in std_logic;
		reset			: in std_logic;
		enable		: in std_logic;	--signal that is being generated by debounce unit every new press
		data_in 		: in std_logic_vector(4 downto 0);	--code of every pressed button arrived with the 'en_in'
		digit_saved	: out std_logic;	--signal to spot the shift of every digit
		code_saved	: out std_logic;	--signal to spot the press of # (evaluation button)
		code_out		: out std_logic_vector(15 downto 0)
	);

end shift_unit;

architecture Behavioral of shift_unit is

component shift_register

	port
	(
		d			: in std_logic_vector(3 downto 0);
		clk		: in std_logic;
		reset		: in std_logic;
		enable	: in std_logic;
		q			: out std_logic_vector(15 downto 0)
	);

end component;

component shift_control

	port
	(
		clk			: in std_logic;
		reset			: in std_logic;
		en_in			: in std_logic;
		num_in		: in std_logic_vector(4 downto 0);
		ready			: out std_logic;
		en_out		: out std_logic;
		num_out		: out std_logic_vector(3 downto 0)
	);

end component;

signal write_en	: std_logic;
signal number		: std_logic_vector(3 downto 0);

begin

label_shift_control_port_map:
shift_control port map
	(
		clk			=> clk,
		reset			=> reset,
		en_in			=> enable,
		num_in		=> data_in,
		en_out		=> write_en,
		ready			=> code_saved,
		num_out		=> number
	);

label_shift_register_port_map:
shift_register port map
	(
		d			=> number,
		clk		=> clk,
		reset		=> reset,
		enable	=> write_en,
		q			=> code_out
	);
	
digit_saved <= write_en;
	
end Behavioral;

